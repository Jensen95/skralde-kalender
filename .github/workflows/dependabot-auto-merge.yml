name: Dependabot Auto-Merge

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: write
  pull-requests: write

jobs:
  dependabot:
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v1
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Auto-approve minor and patch updates
        if: steps.metadata.outputs.update-type == 'version-update:semver-minor' || steps.metadata.outputs.update-type == 'version-update:semver-patch'
        run: gh pr review --approve "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable auto-merge for minor and patch updates
        if: steps.metadata.outputs.update-type == 'version-update:semver-minor' || steps.metadata.outputs.update-type == 'version-update:semver-patch'
        run: gh pr merge --auto --squash "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  wait-for-checks:
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    needs: dependabot
    steps:
      - name: Wait for status checks
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number } = context.issue;
            
            // Wait for checks to complete
            let checks;
            let attempts = 0;
            const maxAttempts = 30;
            
            do {
              attempts++;
              await new Promise(resolve => setTimeout(resolve, 30000)); // Wait 30 seconds
              
              const { data } = await github.rest.pulls.get({
                owner,
                repo,
                pull_number: number,
              });
              
              const { data: checkRuns } = await github.rest.checks.listForRef({
                owner,
                repo,
                ref: data.head.sha,
              });
              
              checks = checkRuns.check_runs;
              const allComplete = checks.every(check => check.status === 'completed');
              const allSuccess = checks.every(check => check.conclusion === 'success');
              
              if (allComplete) {
                if (allSuccess) {
                  console.log('All checks passed!');
                  break;
                } else {
                  console.log('Some checks failed, auto-merge cancelled');
                  process.exit(1);
                }
              }
              
              console.log(`Waiting for checks... (${attempts}/${maxAttempts})`);
            } while (attempts < maxAttempts);
            
            if (attempts >= maxAttempts) {
              console.log('Timeout waiting for checks');
              process.exit(1);
            }